[["index.html", "Data Science for Psychologists A Modernized Exploratory and Graphical Data Analysis with R Welcome to PSY 703 Attribution Colophon License", " Data Science for Psychologists A Modernized Exploratory and Graphical Data Analysis with R S. Mason Garrison 2021-01-05 Welcome to PSY 703 Welcome to class! This website is designed to accompany Mason Garrisons Data Science for Psychologists (DS4P). DS4P is a graduate-level quantitative methods course at Wake Forest University. This website hosts the course notes and lecture materials. All the embedded lecture videos can be found on a youtube playlist. You can find the current version of the course syllabus here, along with all of the other syllabi for my classes. Attribution This class leans heavily on other peoples materials and ideas. I have done my best to document the origin of the materials and ideas. They include: Jenny Bryans (jennybryan.org) STAT 545; Joe Rodgerss PSY 8751 Exploratory and Graphical Data Analysis Course Julia Fukuyamas EXPLORATORY DATA ANALYSIS You can see specific changes by examining the edit history on the git repo STAT 545 Jenny Bryans (jennybryan.org) STAT 545 course is from the University of British Columbia. The STAT 545 course became notable as an early example of a data science course taught in a statistics program. It is also notable for its focus on teaching using modern R packages, Git and GitHub, its extensive sharing of teaching materials openly online, and its strong emphasis on practical data cleaning, exploration, and visualization skills, rather than algorithms and theory.  Wikipedia PSY 8751 Joe Rodgerss EXPLORATORY and GRAPHICAL DATA ANALYSIS course was developed at the University of Oklahoma. I took his class while a graduate student at Vanderbilt University. Stat 470/670 Julia Fukuyamas EXPLORATORY DATA ANALYSIS is an R based class. Shes an Assistant Professor in the Department of Statistics at Indiana University. Colophon This book was written in bookdown inside RStudio. The website r-computing-lab.github.io/DataScience4Psych is hosted with github, The complete source is available from GitHub. The Psych 703 logo was designed by me and the book style was designed by Desir√©e De Leon. This version of the book was built with: #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.0.3 (2020-10-10) #&gt; os Windows 10 x64 #&gt; system x86_64, mingw32 #&gt; ui RTerm #&gt; language (EN) #&gt; collate English_United States.1252 #&gt; ctype English_United States.1252 #&gt; tz America/New_York #&gt; date 2021-01-05 Along with these packages: License This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Sharecopy and redistribute the material in any medium or format Remixremix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: AttributionYou must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlikeIf you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictionsYou may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],["week-0-overview.html", "Week 0: Overview 0.1 Course Introduction 0.2 Materials 0.3 Course Modality 0.4 Knowledge is Power", " Week 0: Overview This module is designed to orient you to the class. Please watch the videos and work your way through the notes. Although the videos are embedded into the course course, you can find the video playlist here. 0.1 Course Introduction Data Science for Psychologists (DS4P) introduces on the principles of data science, including: data wrangling, modeling, visualization, and communication. In this class, we link those principles to psychological methods and open science practices by emphasizing exploratory analyses and description, rather than confirmatory analyses and prediction. Through the semester we will work our way thru Wickham and Grolemunds R for Data Science text and develop proficiency with tidyverse. This class emphasizes replication and reproducibility. DS4P is a practical skilled-based class and should be useful to students aiming for academia as well as those interested in industry. Applications of these methods can be applied to a full range of psychological areas, including perception (e.g, eye-tracking data), neuroscience (e.g., visualizing neural networks), and individual differences (e.g., valence analysis). 0.1.1 Big Ideas This class covers the following broad five areas: Reproducibility; Replication; Robust Methods; Resplendent Visualizations; and R Programming. 0.2 Materials 0.2.1 Hardware This class is requires that you have a laptop that can run R. 0.2.2 Required Texts The text is intended to supplement the videos, lecture notes, and in-class tutorials. You need to consume all four in order to be successful in this class. R for Data Science text (???) 0.2.3 Software 0.2.3.1 R R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows, and MacOS. 0.2.3.2 R Studio RStudio is a free integrated development environment (IDE), a powerful user interface for R. 0.2.3.3 Git Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files  called a repository  in a structured way. Think of it like the Track Changes features from Microsoft Word. 0.2.3.4 Github Github is a free IDE and hosting service for Git. As a Wake Forest student, you should be able to access the GitHub Student Developer Pack for free. It includes a free PRO upgrade for your github account 0.3 Course Modality This class is a blended class. The online portions are asynchronous. Ive created a video highlighting how to be a successful asynchronous learner. Much of this information comes from Northeastern Universitys Tips for Taking Online Classes 0.4 Knowledge is Power This brief video is covers the icebreaker I do in all of my classes. I encourage you to watch it as in it I discuss stereotype threats and stats anxiety. "],["week-1-overview.html", "Unit 1 Week 1: Overview 1.1 Video Roadmap", " Unit 1 Week 1: Overview This module is designed to &lt;&gt;. Please watch the videos and work your way through the notes. Although the videos are embedded into the course course, you can find the video playlist here. 1.1 Video Roadmap Big Ideas What is Exploratory Data Analysis Exploratory vs. Confirmatory Analyses How to succeed Getting Set Up with R "],["r-examples.html", "Unit 2 R Examples 2.1 Big Ideas", " Unit 2 R Examples 2.1 Big Ideas A first example: Heights of the highest points by state # data-read ## load required packages and data library(tidyverse) #&gt; -- Attaching packages --------------------------------------- tidyverse 1.3.0 -- #&gt; v ggplot2 3.3.2 v purrr 0.3.4 #&gt; v tibble 3.0.4 v dplyr 1.0.2 #&gt; v tidyr 1.1.2 v stringr 1.4.0 #&gt; v readr 1.4.0 v forcats 0.5.0 #&gt; -- Conflicts ------------------------------------------ tidyverse_conflicts() -- #&gt; x dplyr::filter() masks stats::filter() #&gt; x dplyr::lag() masks stats::lag() options(tibble.print_min = 15) heights = read_csv(&quot;data/highest-points-by-state.csv&quot;) #&gt; #&gt; -- Column specification -------------------------------------------------------- #&gt; cols( #&gt; elevation = col_double(), #&gt; state = col_character() #&gt; ) ## switch from feet to meters heights$elevation = heights$elevation * .3048 ## data-print heights #&gt; # A tibble: 50 x 2 #&gt; elevation state #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 733. Alabama #&gt; 2 6168. Alaska #&gt; 3 3851. Arizona #&gt; 4 839. Arkansas #&gt; 5 4418. California #&gt; 6 4399. Colorado #&gt; 7 725. Connecticut #&gt; 8 137. Delaware #&gt; 9 105. Florida #&gt; 10 1458. Georgia #&gt; 11 4205. Hawaii #&gt; 12 3859. Idaho #&gt; 13 376. Illinois #&gt; 14 383. Indiana #&gt; 15 509. Iowa #&gt; # ... with 35 more rows ## data-arrange-ascending arrange(heights, elevation) #&gt; # A tibble: 50 x 2 #&gt; elevation state #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 105. Florida #&gt; 2 137. Delaware #&gt; 3 163. Louisiana #&gt; 4 246. Mississippi #&gt; 5 247. Rhode Island #&gt; 6 376. Illinois #&gt; 7 383. Indiana #&gt; 8 472. Ohio #&gt; 9 509. Iowa #&gt; 10 540. Missouri #&gt; 11 550. New Jersey #&gt; 12 595. Wisconsin #&gt; 13 603. Michigan #&gt; 14 701. Minnesota #&gt; 15 725. Connecticut #&gt; # ... with 35 more rows ## data-arrange-descending arrange(heights, desc(elevation)) #&gt; # A tibble: 50 x 2 #&gt; elevation state #&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 6168. Alaska #&gt; 2 4418. California #&gt; 3 4399. Colorado #&gt; 4 4392. Washington #&gt; 5 4207. Wyoming #&gt; 6 4205. Hawaii #&gt; 7 4123. Utah #&gt; 8 4011. New Mexico #&gt; 9 4005. Nevada #&gt; 10 3901. Montana #&gt; 11 3859. Idaho #&gt; 12 3851. Arizona #&gt; 13 3426. Oregon #&gt; 14 2667. Texas #&gt; 15 2207. South Dakota #&gt; # ... with 35 more rows ## stem-and-leaf stem(heights$elevation) #&gt; #&gt; The decimal point is 3 digit(s) to the right of the | #&gt; #&gt; 0 | 11222445555667778 #&gt; 1 | 0011123355566779 #&gt; 2 | 0027 #&gt; 3 | 4999 #&gt; 4 | 00122444 #&gt; 5 | #&gt; 6 | 2 ## density-estimate ggplot(heights, aes(x = elevation)) + geom_density() ## density-estimate-plus-rug ggplot(heights, aes(x = elevation)) + geom_density() + geom_rug() "],["install.html", "Unit 3 Install R and RStudio 3.1 R and RStudio 3.2 Testing testing 3.3 Add-on packages 3.4 Further resources", " Unit 3 Install R and RStudio 3.1 R and RStudio library(vembedr) embed_url(&quot;https://www.youtube.com/watch?v=kVIZGCT5p9U&quot;) %&gt;% use_align(&quot;center&quot;) Install R, a free software environment for statistical computing and graphics from CRAN, the Comprehensive R Archive Network. I highly recommend you install a precompiled binary distribution for your operating system  use the links up at the top of the CRAN page linked above! Install RStudios IDE (stands for integrated development environment), a powerful user interface for R. Get the Open Source Edition of RStudio Desktop. You can run either the Preview version or the official releases available here. RStudio comes with a text editor, so there is no immediate need to install a separate stand-alone editor. RStudio can interface with Git(Hub). However, you must do all the Git(Hub) set up described elsewhere before you can take advantage of this. If you have a pre-existing installation of R and/or RStudio, I highly recommend that you reinstall both and get as current as possible. It can be considerably harder to run old software than new. If you upgrade R, you will need to update any packages you have installed. The command below should get you started, though you may need to specify more arguments if, e.g., you have been using a non-default library for your packages. update.packages(ask = FALSE, checkBuilt = TRUE) Note: this code will only look for updates on CRAN. So if you use a package that lives only on GitHub or if you want a development version from GitHub, you will need to update manually, e.g. via devtools::install_github(). 3.2 Testing testing Do whatever is appropriate for your OS to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you havent written any code or made any figures yet! Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x &lt;- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 print to screen. If yes, youve succeeded in installing R and RStudio. 3.3 Add-on packages R is an extensible system and many people share useful code they have developed as a package via CRAN and GitHub. To install a package from CRAN, for example the dplyr package for data manipulation, here is one way to do it in the R console (there are others). install.packages(&quot;dplyr&quot;, dependencies = TRUE) By including dependencies = TRUE, we are being explicit and extra-careful to install any additional packages the target package, dplyr in the example above, needs to have around. You could use the above method to install the following packages, all of which we will use: tidyr, package webpage ggplot2, package webpage 3.4 Further resources The above will get your basic setup ready but here are some links if you are interested in reading a bit further. How to Use RStudio RStudios leads for learning R R FAQ R Installation and Administration More about add-on packages in the R Installation and Administration Manual "],["r-basics.html", "Unit 4 R basics and workflows 4.1 Basics of working with R at the command line and RStudio goodies 4.2 Workspace and working directory 4.3 RStudio projects 4.4 Stuff", " Unit 4 R basics and workflows 4.1 Basics of working with R at the command line and RStudio goodies Launch RStudio/R. Notice the default panes: Console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) FYI: you can change the default location of the panes, among many other things: Customizing RStudio. Go into the Console, where we interact with the live R process. Make an assignment and then inspect the object you just created: x &lt;- 3 * 4 x #&gt; [1] 12 All R statements where you create objects  assignments  have this form: objectName &lt;- value and in my head I hear, e.g., x gets 12. You will make lots of assignments and the operator &lt;- is a pain to type. Dont be lazy and use =, although it would work, because it will just sow confusion later. Instead, utilize RStudios keyboard shortcut: Alt + - (the minus sign). Notice that RStudio auto-magically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces. RStudio offers many handy keyboard shortcuts. Also, Alt+Shift+K brings up a keyboard shortcut reference card. Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space. You will be wise to adopt a convention for demarcating words in names. i_use_snake_case other.people.use.periods evenOthersUseCamelCase Make another assignment: this_is_a_really_long_name &lt;- 2.5 To inspect this, try out RStudios completion facility: type the first few characters, press TAB, add characters until you disambiguate, then press return. Make another assignment: mason_rocks &lt;- 2 ^ 3 Lets try to inspect: masonrocks #&gt; Error in eval(expr, envir, enclos): object &#39;masonrocks&#39; not found masn_rocks #&gt; Error in eval(expr, envir, enclos): object &#39;masn_rocks&#39; not found Implicit contract with the computer / scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Get better at typing. R has a mind-blowing collection of built-in functions that are accessed like so: functionName(arg1 = val1, arg2 = val2, and so on) Lets try using seq() which makes regular sequences of numbers and, while were at it, demo more helpful features of RStudio. Type se and hit TAB. A pop up shows you possible completions. Specify seq() by typing more to disambiguate or using the up/down arrows to select. Notice the floating tool-tip-type help that pops up, reminding you of a functions arguments. If you want even more help, press F1 as directed to get the full documentation in the help tab of the lower right pane. Now open the parentheses and notice the automatic addition of the closing parenthesis and the placement of cursor in the middle. Type the arguments 1, 10 and hit return. RStudio also exits the parenthetical expression for you. IDEs are great. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The above also demonstrates something about how R resolves function arguments. You can always specify in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want a sequence from = 1 that goes to = 10. Since we didnt specify step size, the default value of by in the function definition is used, which ends up being 1 in this case. For functions I call often, I might use this resolve by position for the first argument or maybe the first two. After that, I always use name = value. Make this assignment and notice similar help with quotation marks. yo &lt;- &quot;hello world&quot; If you just make an assignment, you dont get to see the value, so then youre tempted to immediately inspect. y &lt;- seq(1, 10) y #&gt; [1] 1 2 3 4 5 6 7 8 9 10 This common action can be shortened by surrounding the assignment with parentheses, which causes assignment and print to screen to happen. (y &lt;- seq(1, 10)) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Not all functions have (or require) arguments: date() #&gt; [1] &quot;Tue Jan 05 10:58:42 2021&quot; Now look at your workspace  in the upper right pane. The workspace is where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;check_quietly&quot; &quot;install_quietly&quot; #&gt; [3] &quot;mason_rocks&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_really_long_name&quot; #&gt; [7] &quot;x&quot; &quot;y&quot; #&gt; [9] &quot;yo&quot; ls() #&gt; [1] &quot;check_quietly&quot; &quot;install_quietly&quot; #&gt; [3] &quot;mason_rocks&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_really_long_name&quot; #&gt; [7] &quot;x&quot; &quot;y&quot; #&gt; [9] &quot;yo&quot; If you want to remove the object named y, you can do this: rm(y) To remove everything: rm(list = ls()) or click the broom in RStudios Environment pane. 4.2 Workspace and working directory One day you will need to quit R, go do something else and return to your analysis later. One day you will have multiple analyses going that use R and you want to keep them separate. One day you will need to bring data from the outside world into R and send numerical results and figures from R back out into the world. To handle these real life situations, you need to make two decisions: What about your analysis is real, i.e. will you save it as your lasting record of what happened? Where does your analysis live? 4.2.1 Workspace, .RData As a beginning R user, its OK to consider your workspace real. Very soon, I urge you to evolve to the next level, where you consider your saved R scripts as real. (In either case, of course the input data is very much real and requires preservation!) With the input data and the R code you used, you can reproduce everything. You can make your analysis fancier. You can get to the bottom of puzzling results and discover and fix bugs in your code. You can reuse the code to conduct similar analyses in new projects. You can remake a figure with different aspect ratio or save is as TIFF instead of PDF. You are ready to take questions. You are ready for the future. If you regard your workspace as real (saving and reloading all the time), if you need to redo analysis  youre going to either redo a lot of typing (making mistakes all the way) or will have to mine your R history for the commands you used. Rather than becoming an expert on managing the R history, a better use of your time and energy is to keep your good R code in a script for future reuse. Because it can be useful sometimes, note the commands youve recently run appear in the History pane. But you dont have to choose right now and the two strategies are not incompatible. Lets demo the save / reload the workspace approach. Upon quitting R, you have to decide if you want to save your workspace, for potential restoration the next time you launch R. Depending on your set up, R or your IDE, e.g. RStudio, will probably prompt you to make this decision. Quit R/RStudio, either from the menu, using a keyboard shortcut, or by typing q() in the Console. Youll get a prompt like this: Save workspace image to ~/.Rdata? Note where the workspace image is to be saved and then click Save. Using your favorite method, visit the directory where image was saved and verify there is a file named .RData. You will also see a file .Rhistory, holding the commands submitted in your recent session. Restart RStudio. In the Console you will see a line like this: [Workspace loaded from ~/.RData] indicating that your workspace has been restored. Look in the Workspace pane and youll see the same objects as before. In the History tab of the same pane, you should also see your command history. Youre back in business. This way of starting and stopping analytical work will not serve you well for long but its a start. 4.2.2 Working directory Any process running on your computer has a notion of its working directory. In R, this is where R will look, by default, for files you ask it to load. It also where, by default, any files you write to disk will go. Chances are your current working directory is the directory we inspected above, i.e. the one where RStudio wanted to save the workspace. You can explicitly check your working directory with: getwd() It is also displayed at the top of the RStudio console. As a beginning R user, its OK let your home directory or any other weird directory on your computer be Rs working directory. Very soon, I urge you to evolve to the next level, where you organize your analytical projects into directories and, when working on project A, set Rs working directory to the associated directory. Although I do not recommend it, in case youre curious, you can set Rs working directory at the command line like so: setwd(&quot;~/myCoolProject&quot;) Although I do not recommend it, you can also use RStudios Files pane to navigate to a directory and then set it as working directory from the menu: Session &gt; Set Working Directory &gt; To Files Pane Location. (Youll see even more options there). Or within the Files pane, choose More and Set As Working Directory. But theres a better way. A way that also puts you on the path to managing your R work like an expert. 4.3 RStudio projects Keeping all the files associated with a project organized together  input data, R scripts, analytical results, figures  is such a wise and common practice that RStudio has built-in support for this via its projects. Lets make one to use for the rest of this workshop/class. Do this: File &gt; New Project. The directory name you choose here will be the project name. Call it whatever you want (or follow me for convenience). I created a directory and, therefore RStudio project, called swc in my tmp directory, FYI. setwd(&quot;~/tmp/swc&quot;) Now check that the home directory for your project is the working directory of our current R process: getwd() I cant print my output here because this document itself does not reside in the RStudio Project we just created. Lets enter a few commands in the Console, as if we are just beginning a project: a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) #&gt; [1] 0.45 write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) #&gt; png #&gt; 2 Lets say this is a good start of an analysis and your ready to start preserving the logic and code. Visit the History tab of the upper right pane. Select these commands. Click To Source. Now you have a new pane containing a nascent R script. Click on the floppy disk to save. Give it a name ending in .R or .r, I used toy-line.r and note that, by default, it will go in the directory associated with your project. Quit RStudio. Inspect the folder associated with your project if you wish. Maybe view the PDF in an external viewer. Restart RStudio. Notice that things, by default, restore to where we were earlier, e.g. objects in the workspace, the command history, which files are open for editing, where we are in the file system browser, the working directory for the R process, etc. These are all Good Things. Change some things about your code. Top priority would be to set a sample size n at the top, e.g. n &lt;- 40, and then replace all the hard-wired 40s with n. Change some other minor-but-detectable stuff, e.g. alter the sample size n, the slope of the line b,the color of the line  whatever. Practice the different ways to re-run the code: Walk through line by line by keyboard shortcut (Command+Enter) or mouse (click Run in the upper right corner of editor pane). Source the entire document  equivalent to entering source('toy-line.r') in the Console  by keyboard shortcut (Shift+Command+S) or mouse (click Source in the upper right corner of editor pane or select from the mini-menu accessible from the associated down triangle). Source with echo from the Source mini-menu. Visit your figure in an external viewer to verify that the PDF is changing as you expect. In your favorite OS-specific way, search your files for toy_line_plot.pdf and presumably you will find the PDF itself (no surprise) but also the script that created it (toy-line.r). This latter phenomenon is a huge win. One day you will want to remake a figure or just simply understand where it came from. If you rigorously save figures to file with R code and not ever ever ever the mouse or the clipboard, you will sing my praises one day. Trust me. 4.4 Stuff It is traditional to save R scripts with a .R or .r suffix. Follow this convention unless you have some extraordinary reason not to. Comments start with one or more # symbols. Use them. RStudio helps you (de)comment selected lines with Ctrl+Shift+C (Windows and Linux) or Command+Shift+C (Mac). Clean out the workspace, i.e. pretend like youve just revisited this project after a long absence. The broom icon or rm(list = ls()). Good idea to do this, restart R (available from the Session menu), re-run your analysis to truly check that the code youre saving is complete and correct (or at least rule out obvious problems!). This workflow will serve you well in the future: Create an RStudio project for an analytical project Keep inputs there (well soon talk about importing) Keep scripts there; edit them, run them in bits or as a whole from there Keep outputs there (like the PDF written above) Avoid using the mouse for pieces of your analytical workflow, such as loading a dataset or saving a figure. Terribly important for reproducibility and for making it possible to retrospectively determine how a numerical table or PDF was actually produced (searching on local disk on filename, among .R files, will lead to the relevant script). Many long-time users never save the workspace, never save .RData files (Im one of them), never save or consult the history. Once/if you get to that point, there are options available in RStudio to disable the loading of .RData and permanently suppress the prompt on exit to save the workspace (go to Tools &gt; Options &gt; General). For the record, when loading data into R and/or writing outputs to file, you can always specify the absolute path and thereby insulate yourself from the current working directory. This is rarely necessary when using RStudio projects properly. "],["overview.html", "Overview", " Overview Although this part now links out to external resources, if youre working through this material on your own, let this be a nudge to pause around here and think about your workflow. I give you permission to spend some time and energy sorting this out! It can be as or more important than learning a new R function or package. The experts dont talk about this much, because theyve already got a workflow and its something they do almost without thinking. Working through subsequent material in R Markdown documents, possibly using Git and GitHub to track and share your progress, is a great idea and will leave you more prepared for your future data analysis projects. Typing individual lines of R code is but a small part of data analysis and it pays off to think holistically about your workflow. "],["version-control.html", "Unit 5 Git, GitHub, and RStudio", " Unit 5 Git, GitHub, and RStudio At this point in DS4P, all students create their own DS4P GitHub repository that they will use to develop their course work throughout the rest of the course. This has two purposes: It is helpful for course mechanics, e.g. homework submission and grading, peer review. Learning to use Git and GitHub, with R and RStudio, is a legitimate pedagogical goal. Jenny Bryans instructions around installation, setup, and early Git usage eventually grew so extensive that she created a dedicated website. This content can now be found here: https://happygitwithr.com "],["r-markdown.html", "Unit 6 R Markdown", " Unit 6 R Markdown DS4P course work is generally submitted in the form of R Markdown documents. Students submit an .Rmd file, which they have executed or rendered to a .md markdown file. R Markdown is a very accessible way to create computational documents that combine prose and tables and figures produced by R code. An introductory R Markdown workflow, including how it intersects with Git, GitHub, and RStudio, is now maintained within the Happy Git site: Test drive R Markdown "],["video-roadmap-week-2.html", "Unit 7 Video Roadmap Week 2", " Unit 7 Video Roadmap Week 2 Univariate Data Visualization Goals Quantile Plots Histograms and Density Estimates Q-Q Plots Box Plots "],["r-examples-1.html", "Unit 8 R Examples 8.1 Univariate Data Visualization", " Unit 8 R Examples 8.1 Univariate Data Visualization ## load-packages ## lattice has the singer data that we&#39;re going to use library(lattice) library(ggplot2) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(magrittr) library(stringr) ## ----blank-ggplot-------------------------------------------------------- ## nothing gets plotted! why not? ggplot(singer, aes(x = height)) ## ----ecdf-ggplot--------------------------------------------------------- ## we need to tell it not just that we want to plot height, but how to plot it. ## here we&#39;re saying to plot height as an ecdf ggplot(singer, aes(x = height)) + stat_ecdf() ## ecdf-ggplot-take-2 ## another way of doing the same thing, ggplots can come in pieces singer.gg = ggplot(singer, aes(x = height)) singer.gg + stat_ecdf() ## ecdf-ggplot-labeled ## and if we want to label the axes singer.gg + stat_ecdf() + xlab(&quot;This is the x-axis&quot;) + ylab(&quot;This is the y-axis&quot;) + ggtitle(&quot;Here&#39;s a title&quot;) ggplot(singer, aes(x = height, color = voice.part)) + stat_ecdf() ggplot(singer, aes(x = height)) + stat_ecdf() + facet_wrap(~ voice.part, ncol = 2) ## quantile-plot-setup ## quantile plots by hand Tenor1 = singer %&gt;% subset(voice.part == &quot;Tenor 1&quot;) %&gt;% arrange(height) ## exactly the same as Tenor1 = arrange( subset(singer, voice.part == &quot;Tenor 1&quot;), height) ## close to the same as sort(singer$height[singer$voice.part == &quot;Tenor 1&quot;]) ## [1] 64 64 65 66 66 66 67 67 68 68 68 69 70 70 71 71 72 72 73 74 76 nTenor1 = nrow(Tenor1) f.value = (0.5:(nTenor1 - 0.5))/nTenor1 Tenor1$f.value = f.value ## quantile-plot ggplot(Tenor1, aes(x = f.value, y = height)) + geom_line() + geom_point() ## histogram ggplot(singer, aes(x = height)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## density ggplot(singer, aes(x = height)) + geom_density() ## density-with-rug ggplot(singer, aes(x = height)) + geom_density(adjust = .5) + geom_rug(aes(y = 0), sides = &quot;b&quot;, position = position_jitter(height = 0)) ## histogram-simulation set.seed(0) df = data.frame(x = c(rnorm(25, 0, 1), rnorm(25, 5, 1))) ggplot(df) + geom_histogram(aes(x = x)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## histogram-simulation-more-bins ggplot(df) + geom_histogram(aes(x = x), bins = 50) ## ecdf-simulation ggplot(df) + stat_ecdf(aes(x = x)) ## qq-base Tenor1 = singer %&gt;% subset(voice.part == &quot;Tenor 1&quot;) Bass2 = singer %&gt;% subset(voice.part == &quot;Bass 2&quot;) qq.df = as.data.frame(qqplot(Tenor1$height, Bass2$height, plot.it = FALSE)) ## qq-ggplot ggplot(qq.df, aes(x = x, y = y)) + geom_point() ## qnorm-simulation ggplot(data.frame(x = rnorm(100))) + stat_qq(aes(sample = x)) + geom_abline(aes(slope = 1, intercept = 0)) ##qnorm-singers ggplot(singer) + stat_qq(aes(sample = height), distribution = qnorm) ## boxplot-theory (iqr = qnorm(.75) * 2) ## [1] 1.34898 (uav = qnorm(.75) + 1.5 * iqr) ## [1] 2.697959 (prob_outside = pnorm(uav, lower.tail = FALSE) * 2) ## [1] 0.006976603 ## boxplot-one ggplot(singer, aes(x = &quot;Height&quot;, y = height)) + geom_boxplot() ## boxplot-two ggplot(singer, aes(x = voice.part, y = height)) + geom_boxplot() + coord_flip() "],["references.html", "References", " References "]]
